services:
  ### Primary container with PipelineWise CLI
  pipelinewise:
    platform: linux/amd64
    image: ubuntu:20.04
    container_name: pipelinewise_dev
    working_dir: /opt/pipelinewise
    entrypoint: /opt/pipelinewise/dev-project/entrypoint.sh
    env_file:
      - .env
    environment:
      PATH: ${PIPELINEWISE_HOME}/.virtualenvs/pipelinewise/bin:${PATH}
    volumes:
      - ../:/opt/pipelinewise
      # don't create container specific .virtualenvs files on host
      - /opt/pipelinewise/dev-project/.virtualenvs/
      # mount pipelinewise pipe configuration directory to host for ease of troubleshooting
      - .pipelinewise:/root/.pipelinewise

    # Build only when test databases are ready
    depends_on:
      - db_postgres_source
      - db_mysql_source
      - db_postgres_dwh
      - db_mongo_source
    networks:
      - pipelinewise_network

  ### TAP (Data source) containers
  # PostgreSQL service container used as test source database
  # Using Debezium image with wal2json plugin for logical decoding
  db_postgres_source:
    build:
      context: ./pg
      dockerfile: Dockerfile
    container_name: pipelinewise_dev_postgres_source
    volumes:
      - ./pg/pg_hba.conf:/var/lib/postgresql/pg_hba.conf
    # Making some logical decoding and ssl adjustments
    command: >
      -c "wal_level=logical"
      -c "max_replication_slots=5"
      -c "max_wal_senders=5"
      -c "ssl=on"
      -c "ssl_cert_file=/var/lib/postgresql/server.crt"
      -c "ssl_key_file=/var/lib/postgresql/server.key"
      -c "hba_file=/var/lib/postgresql/pg_hba.conf"
    ports:
      - ${TAP_POSTGRES_PORT_ON_HOST}:${TAP_POSTGRES_PORT}
    environment:
      POSTGRES_USER: ${TAP_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TAP_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TAP_POSTGRES_DB}
    networks:
      - pipelinewise_network

  # MySQL service container used as test source database
  db_mysql_source:
    image: mariadb:10.6.18
    container_name: pipelinewise_dev_mysql_source
    ports:
      - ${TAP_MYSQL_PORT_ON_HOST}:${TAP_MYSQL_PORT}
    volumes:
      - ./my/server-cert.pem:/etc/my.cnf.d/certificates/server-cert.pem
      - ./my/server-key.pem:/etc/my.cnf.d/certificates/server-key.pem
      - ./my/ca-cert.pem:/etc/my.cnf.d/certificates/ca-cert.pem
    command: >
      --default-authentication-plugin=mysql_native_password
      --performance_schema=ON
      --server-id=1
      --log-bin=mysql-bin
      --binlog-format=ROW
      --binlog-do-db=${TAP_MYSQL_DB}
      --binlog-do-db=${TAP_MYSQL_REPLICA_DB}
      --tls_version=TLSv1.2
      --require_secure_transport=ON
      --ssl_cert=/etc/my.cnf.d/certificates/server-cert.pem
      --ssl_key=/etc/my.cnf.d/certificates/server-key.pem
      --ssl_ca=/etc/my.cnf.d/certificates/ca-cert.pem
    environment:
      MYSQL_ROOT_PASSWORD: ${TAP_MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${TAP_MYSQL_USER}
      MYSQL_PASSWORD: ${TAP_MYSQL_PASSWORD}
      MYSQL_DATABASE: ${TAP_MYSQL_DB}
    networks:
      - pipelinewise_network

  db_mysql_source_replica:
    image: mariadb:10.6.18
    container_name: pipelinewise_dev_mysql_source_replica
    ports:
      - ${TAP_MYSQL_REPLICA_PORT_ON_HOST}:${TAP_MYSQL_REPLICA_PORT}
    command: --default-authentication-plugin=mysql_native_password --server-id=2 --log-bin=mysql-bin --relay-log=mysql-relay-log --replicate-do-db=${TAP_MYSQL_REPLICA_DB}
    environment:
      MYSQL_ROOT_PASSWORD: ${TAP_MYSQL_REPLICA_ROOT_PASSWORD}
      MYSQL_USER: ${TAP_MYSQL_REPLICA_USER}
      MYSQL_PASSWORD: ${TAP_MYSQL_REPLICA_PASSWORD}
      MYSQL_DATABASE: ${TAP_MYSQL_REPLICA_DB}
    networks:
      - pipelinewise_network

  db_mongo_source:
    container_name: "pipelinewise_dev_mongodb_source"
    build:
      context: ./mongo
      dockerfile: Dockerfile
    ports:
      - ${TAP_MONGODB_PORT_ON_HOST}:${TAP_MONGODB_PORT}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${TAP_MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${TAP_MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${TAP_MONGODB_DB}
      MONGO_USERNAME: ${TAP_MONGODB_USER}
      MONGO_PASSWORD: ${TAP_MONGODB_PASSWORD}
      MONGO_REPLICA_HOST: db_mongo_source
    command: >
      mongod
      --bind_ip_all
      --replSet rs0
      --keyFile /etc/ssl/replica.key
      --tlsMode requireTLS
      --tlsAllowConnectionsWithoutCertificates
      --tlsCertificateKeyFile /etc/ssl/mongodb.pem
      --tlsCAFile /etc/ssl/rootCA.pem
      --quiet
    networks:
      - pipelinewise_network

  ### Target containers
  # PostgreSQL service container used as test target database
  db_postgres_dwh:
    image: postgres:11.4
    container_name: pipelinewise_dev_postgres_dwh
    ports:
      - ${TARGET_POSTGRES_PORT_ON_HOST}:${TARGET_POSTGRES_PORT}
    environment:
      POSTGRES_USER: ${TARGET_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TARGET_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TARGET_POSTGRES_DB}
    networks:
      - pipelinewise_network

networks:
  pipelinewise_network:
    ipam:
      driver: default
      config:
        - subnet: 192.168.56.0/24
