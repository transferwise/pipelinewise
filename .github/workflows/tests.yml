name: Tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  workflow_dispatch:

jobs:
  unit_test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
      - name: Checking out repo
        uses: actions/checkout@v2

      - name: Check if python changes are present
        id: check
        env:
          GITHUB_REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        continue-on-error: true
        run: ./scripts/ci_check_no_file_changes.sh python

      - name: Set up Python ${{ matrix.python-version }}
        if: steps.check.outcome == 'failure'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        if: steps.check.outcome == 'failure'
        run: |
          pip install -U pip setuptools wheel
          pip install -Ue .[test]

      - name: Run Unit tests
        if: steps.check.outcome == 'failure'
        run: |
          pytest --cov=pipelinewise --cov-fail-under=72 -v tests/units

  integration_tests:
    runs-on: ubuntu-20.04
    environment: ci_tests
#    concurrency:
#      group: ${{ github.head_ref }}
#      cancel-in-progress: true

    steps:
      - name: Checking out repo
        uses: actions/checkout@v2

      - name: Check if python changes are present
        id: check
        env:
          GITHUB_REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        continue-on-error: true
        run: ./scripts/ci_check_no_file_changes.sh python

      - name: Setup test containers
#        if: steps.check.outcome == 'failure'
        run: docker-compose -f dev-project/docker-compose.yml up -d

      - name: List containers
#        if: steps.check.outcome == 'failure'
        run: docker ps -a

      - name: Wait for containers to be ready
#        if: steps.check.outcome == 'failure'
        run: |
          while [ 'docker logs pipelinewise_dev | grep "PipelineWise Dev environment is ready"' ]; do
            echo 'Sleeping for 30s';
            sleep 30;
            docker logs pipelinewise_dev -n 10
          done

      - name: Run target pg integration tests
#        if: steps.check.outcome == 'failure'
        run: docker exec -it pipelinewise_dev pytest tests/end_to_end/test_target_postgres.py -vx

#       Todo: enable this
#      - name: Run integration tests
#        if: steps.check.outcome == 'failure'
#        run: |
#          docker exec -it pipelinewise_dev pytest tests/end_to_end -vx
