version: 2
jobs:
  # Install PipelineWise components and full test environment
  build-test-env:

    # Required docker containers
    docker:
      - image: circleci/python:3.7.4
        environment:
          DB_TAP_MYSQL_HOST: db_mysql_source
          DB_TAP_MYSQL_PORT: 3306
          DB_TAP_MYSQL_USER: pipelinewise
          DB_TAP_MYSQL_PASSWORD: secret
          DB_TAP_MYSQL_DB: mysql_source_db

          DB_TAP_POSTGRES_HOST: db_postgres_source
          DB_TAP_POSTGRES_PORT: 5432
          DB_TAP_POSTGRES_USER: pipelinewise
          DB_TAP_POSTGRES_PASSWORD: secret
          DB_TAP_POSTGRES_DB: postgres_source_db

          DB_TARGET_POSTGRES_HOST: db_postgres_dwh
          DB_TARGET_POSTGRES_PORT: 5432
          DB_TARGET_POSTGRES_USER: pipelinewise
          DB_TARGET_POSTGRES_PASSWORD: secret
          DB_TARGET_POSTGRES_DB: postgres_dwh

      # PostgreSQL service container image used as test source database
      - image: postgres:11.4
        name: db_postgres_source
        environment:
          POSTGRES_USER: pipelinewise
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: postgres_source_db

       # MariaDB service container image used as test source database
      - image: mariadb:10.2.26
        name: db_mysql_source
        environment:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_USER: pipelinewise
          MYSQL_PASSWORD: secret
          MYSQL_DATABASE: mysql_source_db

      # PostgreSQL service container image used as test source database
      - image: postgres:11.4
        name: db_postgres_dwh
        environment:
          POSTGRES_USER: pipelinewise
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: postgres_dwh

    steps:
      - checkout

      # Build source databases for integration tests
      - run:
          name: 'Build source databases for integration tests'
          command: |
            sudo apt-get update
            sudo apt install mariadb-client postgresql-client
            ./tests/db/tap_mysql_test_db.sh
            ./tests/db/tap_postgres_test_db.sh

  build:
    steps:

      # Installing PipelineWise components and connectors
      - run:
          name: 'Installing PipelineWise components and connectors'
          command: ./install.sh --acceptlicenses

  #test:
  #  steps:
      # Unit Tests and Coverage
  #    - run:
  #        name: 'Unit Tests and Coverage'
  #        command: |
  #          . .virtualenvs/pipelinewise/bin/activate
  #          pip install pytest coverage
  #          coverage run -m pytest --disable-pytest-warnings
  #          coverage report
  #          coverage html -d coverage_html

  # For documentation deployment. You'll need the following environment vars
  # in your Circle CI settings, otherwise this will not work.
  #
  # GH_NAME (your git username)
  # GH_EMAIL (your git email)
  # GH_TOKEN (the personal Git token with pushes enabled)
  #deploy-doc:
  #  docker:
  #    - image: circleci/python:3.6.2
  #  working_directory: ~/gh_doc_automation
  #  steps:
  #    - checkout
  #    - run: .circleci/publish_docs.sh

workflows:
  version: 2
  build:
    jobs:
      - build-test-env
      - build:
          requires:
            - build-test-env

  #deploy:
  #  jobs:
  #    - deploy-doc