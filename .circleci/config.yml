version: 2

references:

  docker_k8s_deployer: &docker_k8s_deployer
    working_directory: ~/pipelinewise
    docker:
      - image: docker.tw.ee/k8s-deployer:2

  attach_workspace: &attach_workspace
    attach_workspace:
      at: ~/pipelinewise

  container_config: &container_config
    working_directory: ~/pipelinewise
    docker:
      # Main python container
      # Use circleci next-gen image
      - image: cimg/python:3.7
        environment:
          TAP_MYSQL_HOST: db_mysql_source
          TAP_MYSQL_PORT: 3306
          TAP_MYSQL_ROOT_PASSWORD: test
          TAP_MYSQL_USER: test
          TAP_MYSQL_PASSWORD: test
          TAP_MYSQL_DB: mysql_source_db

          TAP_POSTGRES_HOST: db_postgres_source
          TAP_POSTGRES_PORT: 5432
          TAP_POSTGRES_USER: test
          TAP_POSTGRES_PASSWORD: test
          TAP_POSTGRES_DB: postgres_source_db

          TARGET_POSTGRES_HOST: db_postgres_dwh
          TARGET_POSTGRES_PORT: 5432
          TARGET_POSTGRES_USER: test
          TARGET_POSTGRES_PASSWORD: test
          TARGET_POSTGRES_DB: postgres_dwh

          TAP_MONGODB_HOST: mongodb_source
          TAP_MONGODB_PORT: 27017
          TAP_MONGODB_USER: mongoUser
          TAP_MONGODB_PASSWORD: Password1
          TAP_MONGODB_DB: test
          TAP_MONGODB_ROOT_USER: mongoUser
          TAP_MONGODB_ROOT_PASSWORD: Password1

      # PostgreSQL service container image used as test source database (for tap-postgres)
      - image: debezium/postgres:12-alpine
        name: db_postgres_source
        # enable logical decoding
        command: -c "wal_level=logical" -c "max_replication_slots=5" -c "max_wal_senders=5"
        environment:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: postgres_source_db

       # MariaDB service container image used as test source database (for tap-mysql)
      - image: mariadb:10.2.26
        name: db_mysql_source
        command: --default-authentication-plugin=mysql_native_password --log-bin=mysql-bin --binlog-format=ROW
        environment:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_DATABASE: mysql_source_db

      # PostgreSQL service container image used as test target (DWH) database (for target-postgres)
      - image: postgres:11.4
        name: db_postgres_dwh
        environment:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: postgres_dwh

      - image: "mongo:4.2-bionic"
        name: "mongodb_source"
        environment:
          MONGO_INITDB_ROOT_USERNAME: mongoUser
          MONGO_INITDB_ROOT_PASSWORD: Password1
          MONGO_INITDB_DATABASE: test
        command: [mongod, --replSet, rs0]

jobs:
  e2e_tests:
    <<: *container_config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          when:

          name: 'Run E2E tests'
          command: |
            ./scripts/ci_check_no_file_changes.sh python && rc=$? || rc=$?

            if [[ $rc -eq 1 ]]
            then
              sudo apt-get update
              sudo apt install mariadb-client postgresql-client mongo-tools mbuffer gettext-base
              wget https://repo.mongodb.org/apt/ubuntu/dists/bionic/mongodb-org/4.2/multiverse/binary-amd64/mongodb-org-shell_4.2.7_amd64.deb
              sudo dpkg -i ./mongodb-org-shell_4.2.7_amd64.deb && rm mongodb-org-shell_4.2.7_amd64.deb
              ./dev-project/mongo/init_rs.sh

              ./tests/db/tap_mysql_db.sh
              ./tests/db/tap_postgres_db.sh
              ./tests/db/tap_mongodb.sh
              ./tests/db/target_postgres.sh

              ./install.sh --acceptlicenses --connectors=all

              . .virtualenvs/pipelinewise/bin/activate
              export PIPELINEWISE_HOME=$PWD
              pytest tests/end_to_end -v
            fi
          no_output_timeout: 30m

  # For documentation deployment. You'll need the following environment vars
  # in your Circle CI settings, otherwise this will not work.
  #
  # GH_NAME (your git username)
  # GH_EMAIL (your git email)
  # GH_TOKEN (the personal Git token with pushes enabled)
  deploy-doc:
    docker:
      - image: cimg/python:3.7
    working_directory: ~/gh_doc_automation
    steps:
      - checkout
      - run:
          name: "Publish doc if it has changed"
          command: |
            ./scripts/ci_check_no_file_changes.sh doc && rc=$? || rc=$?

            if [[ $rc -eq 1 ]]
            then
              .circleci/publish_docs.sh
            fi

  upload_docker_image:
    <<: *docker_k8s_deployer
    steps:
      - checkout
      - setup_remote_docker
      - *attach_workspace
      - run:
          name: Push and release the new docker image to artifactory
          command: k8s-deployment docker-build jfrog-cli-docker-push
          environment:
            DEPLOY_SLACK_CHANNEL: "#analytics-platform-builds"
            DEPLOY_IMAGE_NAME: "pipelinewise"
            DEPLOY_DOCKERFILE: "./Dockerfile"

  promote_docker_image:
    <<: *docker_k8s_deployer
    steps:
      - checkout
      - setup_remote_docker
      - *attach_workspace
      - run:
          name: Promote built artifact for PipelineWise
          command: k8s-deployment trigger-image-promotion
          environment:
            DEPLOY_IMAGE_NAME: "pipelinewise"
            DEPLOY_SLACK_CHANNEL: "#analytics-platform-builds"


workflows:
  version: 2

  build:
    jobs:
      - e2e_tests

      - upload_docker_image:
          context: kubernetes-staging
          requires:
            - e2e_tests
          filters:
            branches:
              only:
                - master

      - promote_docker_image:
          context: promote-build
          requires:
            - upload_docker_image
          filters:
            branches:
              only:
                - master

  deploy_doc:
    jobs:
      - deploy-doc
