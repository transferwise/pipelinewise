version: 2
references:
  container_config: &container_config
    docker:
      # Main python container
      - image: circleci/python:3.7.4
        environment:
          DB_TAP_MYSQL_HOST: db_mysql_source
          DB_TAP_MYSQL_PORT: 3306
          DB_TAP_MYSQL_ROOT_PASSWORD: test
          DB_TAP_MYSQL_USER: test
          DB_TAP_MYSQL_PASSWORD: test
          DB_TAP_MYSQL_DB: mysql_source_db

          DB_TAP_POSTGRES_HOST: db_postgres_source
          DB_TAP_POSTGRES_PORT: 5432
          DB_TAP_POSTGRES_USER: test
          DB_TAP_POSTGRES_PASSWORD: test
          DB_TAP_POSTGRES_DB: postgres_source_db

          DB_TARGET_POSTGRES_HOST: db_postgres_dwh
          DB_TARGET_POSTGRES_PORT: 5432
          DB_TARGET_POSTGRES_USER: test
          DB_TARGET_POSTGRES_PASSWORD: test
          DB_TARGET_POSTGRES_DB: postgres_dwh

      # PostgreSQL service container image used as test source database (for tap-postgres)
      - image: postgres:11.4
        name: db_postgres_source
        environment:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: postgres_source_db

       # MariaDB service container image used as test source database (for tap-mysql)
      - image: mariadb:10.2.26
        name: db_mysql_source
        command: --default-authentication-plugin=mysql_native_password --log-bin=mysql-bin --binlog-format=ROW
        environment:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_DATABASE: mysql_source_db

      # PostgreSQL service container image used as test target (DWH) database (for target-postgres)
      - image: postgres:11.4
        name: db_postgres_dwh
        environment:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: postgres_dwh

jobs:
  test:
    <<: *container_config

    steps:
      - checkout
      - run:
          name: 'Build source databases for integration tests'
          command: |
            sudo apt-get update
            sudo apt install mariadb-client postgresql-client
            ./tests/db/tap_mysql_db.sh
            ./tests/db/tap_postgres_db.sh
      - run:
          name: 'Installing PipelineWise components and connectors'
          command: ./install.sh --connectors=all --acceptlicenses
      - run:
          name: 'Check code formatting and do pylinting'
          command: |
            . .virtualenvs/pipelinewise/bin/activate
            pip install unify pylint
            echo "Checking double quotes..."
            find pipelinewise tests -type f -name '*.py' | xargs unify --check-only
            echo "Running pylint..."
            pylint pipelinewise tests

      - run:
          name: 'Run tests'
          command: |
            . .virtualenvs/pipelinewise/bin/activate
            export PIPELINEWISE_HOME=$PWD
            mkdir test-reports
            coverage run -m pytest -v --junitxml=test-reports/junit.xml
            coverage report
            coverage html -d coverage_html
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: coverage_html

  build-and-push-docker:
    docker:
      - image: docker.tw.ee/k8s-deployer:1

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Push and release the new version
          command: k8s-deployment docker-build docker-push
          environment:
            DEPLOY_DOCKERFILE: ./Dockerfile
            DEPLOY_IMAGE_NAME: pipelinewise
            DEPLOY_SLACK_CHANNEL: '#analytics-db-updates'

  # For documentation deployment. You'll need the following environment vars
  # in your Circle CI settings, otherwise this will not work.
  #
  # GH_NAME (your git username)
  # GH_EMAIL (your git email)
  # GH_TOKEN (the personal Git token with pushes enabled)
  deploy-doc:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/gh_doc_automation
    steps:
      - checkout
      - run: .circleci/publish_docs.sh

workflows:
  version: 2
  build_and_test:
    jobs:
      - test
      - build-and-push-docker:
          context: artifactory-deploy-docker
          requires:
            - test
          filters:
            branches:
              only:
                - master

  deploy_doc:
    jobs:
      - deploy-doc
